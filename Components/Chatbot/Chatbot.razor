@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using BlazorAIChatBot_with_AzureOpenAI.Service
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorAIChatBotOllama.Components.Chatbot
@using Microsoft.Extensions.AI
@using OpenAI.Chat
@using System.ComponentModel
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger Logger
@inject IConfiguration Configuration
@inject IServiceProvider ServiceProvider
@inject CounterService CounterService

<div class="floating-pane">
    <a href="@Nav.GetUriWithQueryParameter("chat", (string?)null)" class="hide-chatbot" title="Close Chat"><span>✖</span></a>

    <div class="chatbot-chat" @ref="chat">
        @if (chatState is not null)
        {
            foreach (var message in chatState.ChatMessages.Where(m => m.Role == ChatRole.Assistant || m.Role == ChatRole.User))
            {
                if (!string.IsNullOrEmpty(message.Contents[0].ToString()))
                {
                    <p @key="@message" class="message message-@message.Role">@MessageProcessor.AllowImages(message.Contents[0].ToString()!)</p>
                }
            }
        }
        else if (missingConfiguration)
        {
            <p class="message message-assistant"><strong>The chatbot is missing required configuration.</strong> Please review your app settings.</p>
        }

        @if (thinking)
        {
            <p class="thinking">"[phi3:latest]" is Thinking...</p>
        }
    </div>

    <form class="chatbot-input" @onsubmit="SendMessageAsync">
        <textarea placeholder="Start chatting..." @ref="@textbox" @bind="messageToSend"></textarea>
        <button type="submit" title="Send" disabled="@(chatState is null)">Send</button>
    </form>
</div>

@code {
    bool missingConfiguration;
    ChatState? chatState;
    ElementReference textbox;
    ElementReference chat;
    string? messageToSend;
    bool thinking;
    IJSObjectReference? jsModule;

    protected override async Task OnInitializedAsync()
    {
        IChatClient? chatClient = ServiceProvider.GetService<IChatClient>();
        List<Microsoft.Extensions.AI.ChatMessage>? chatMessages = ServiceProvider.GetService<List<Microsoft.Extensions.AI.ChatMessage>>();
        if (chatClient is not null)
        {
            AuthenticationState auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            chatState = new ChatState(auth.User, chatClient, chatMessages, Logger);
        }
        else
        {
            missingConfiguration = true;
        }
    }

    private async Task SendMessageAsync()
    {
        var messageCopy = messageToSend?.Trim();
        messageToSend = null;

        if (chatState is not null && !string.IsNullOrEmpty(messageCopy))
        {
            thinking = true;

            ChatOptions chatOptions = new()
                {
                    Tools =
                    [
                        AIFunctionFactory.Create(GetAge),
                        AIFunctionFactory.Create(GetWeather),
                        AIFunctionFactory.Create(ClickCountButton),
                        AIFunctionFactory.Create(NavigateToHomePage),
                        AIFunctionFactory.Create(NavigateToCounterPage),
                        AIFunctionFactory.Create(NavigateToWeatherPage),
                        AIFunctionFactory.Create(NavigateToGoogleMpasPage),
                        AIFunctionFactory.Create(PanToCurrentLocationAsync)
                    ]
                };

            await chatState.AddUserMessageAsync(messageCopy, chatOptions, onMessageAdded: StateHasChanged);

            thinking = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            // Ensure the chat scrolls to the latest message
            await jsModule.InvokeVoidAsync("scrollToEnd", chat);

            if (firstRender)
            {
                // Focus the textbox for immediate user input
                await textbox.FocusAsync();

                // Enable "submit on Enter" functionality
                await jsModule.InvokeVoidAsync("submitOnEnter", textbox);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred in OnAfterRenderAsync.");
        }
    }

    // GetAge function definition
    [Description("Provides Luis Coco age")]
    static string GetAge()
    {
        return "Luis Coco is 50 years old";
    }

    [Description("Gets the weather")]
    static string GetWeather() => Random.Shared.NextDouble() > 0.5 ? "It's sunny" : "It's raining";

    [Description("Click the Count button")]
    void ClickCountButton() // Uses CounterService to increment count
    {
        CounterService.IncrementCount();
    }

    // Navigation functions
    [Description("Navigates to the home page")]
    void NavigateToHomePage()
    {
        Nav.NavigateTo("/");
    }

    [Description("Navigates to the counter page")]
    void NavigateToCounterPage()
    {
        Nav.NavigateTo("/counter");
    }

    [Description("Navigates to the weather page")]
    void NavigateToWeatherPage()
    {
        Nav.NavigateTo("/weather");
    }

    [Description("Navigates to the googlempas page")]
    void NavigateToGoogleMpasPage()
    {
        Nav.NavigateTo("/googleMaps");
    }

    [Description("Pans the map to the current location")]
    async Task PanToCurrentLocationAsync()
    {
        await JS.InvokeVoidAsync("panToCurrentLocation");
    }
}
